{
    "id": "e239a22f-2e5e-4e6a-8d54-b222621d5191",
    "files": [],
    "nodes": [
        {
            "id": "tmp-0",
            "name": "",
            "value": "class squre{\r\nconstructor(_width){\r\n\r\n this. _width = _width;\r\n this.height = _width;\r\n\r\n\r\n\r\n}\r\narea(){\r\n    return this.width * this.height; }\r\n}\r\n\r\nconst asquared = new squre(5);\r\nconst bsquared = new squre(8);\r\n\r\nconsole.log (\"a:\",asquared.area(),\"b:\",bsquared.area());",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "tmp-0",
            "name": "",
            "value": "class reptile extends Animals{\r\n    #coldblooded = true;\r\n    constructor(name, weight,height,legs, color\r\n    )\r\n    super(name,weight,height)\r\n    this.legs = legs\r\n    this.color = color\r\n\r\n}\r\n\r\nisSnake() {\r\n     if (legs === 0) {\r\n     console.log(`ahhhh its a snake`)\r\n     }\r\n{\r\n    whatColor() {\r\n    for (let i = 0; i<= this.color.length - 1 ; i++)\r\n    {console.log(`this is def a reptile ${this.color[i]}`)}\r\n    }\r\n\r\n}\r\n\r\n}",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "tmp-1",
            "name": "",
            "value": "// create a class\r\n\r\nclass Computer{\r\n#PikaPowered = null\r\n// set properties \r\nconstructor(name, cpu, ram, memory, os)\r\nthis._name = name\r\nthis._cpu = cpu\r\nthis._ram = ram\r\nthis._memory = memory \r\nthis.#PikaPowered = new  os\r\n}",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "tmp-0",
            "name": "",
            "value": "const perPage = 10;  // Items per page\r\nlet currentPage = 1;\r\nlet results = [];\r\n\r\n// /// display of the api data\r\n export function displayRes(results) {\r\n     const gallery = document.getElementById('gallery');\r\n    gallery.innerHTML = results.map(item => `<div class=\"item\">${item.name}</div>`).join('');\r\n}\r\n this will make the pages, \"pagination\"\r\n\r\n export function makepages(){\r\n    const pagination = document.getElementById('pagination');\r\n   pagination.innerHTML = '';\r\n    const totalPages = Math.ceil(total / perPage);\r\n}\r\n///Loop time \r\nconst totalPages = []\r\n\r\nfor (let i = 1; i <= totalPages; i++) {\r\n    \r\n    \r\n//     const button = document.createElement(\"button\");\r\n//     button.innerHTML = i;\r\n//     button.addEventListener('click', () => {\r\n//         currentPage = i;\r\n//         updateDisplay();\r\n//     });\r\n//     pagination.appendChild(button);\r\n// }\r\n\r\n\r\n// export function updateDisplay() {\r\n// const start = (currentPage - 1) * perPage;\r\n// const end = start + perPage;\r\n// displayRes(results.slice(start, end));\r\n\r\n// }",
            "mode": "js",
            "outputs": []
        },
        {
            "id": "tmp-1",
            "name": "",
            "value": " // updateDisplay();\r\n    // makepages(results.length);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n// api fetch code \r\n// const url = \r\n// export const fetchData = async (url) => {\r\n//     try {\r\n//         const response = await fetch(url);\r\n//         if (!response.ok) {\r\n//             throw new Error(`HTTP error! status: ${response.status}`);\r\n//         }\r\n//         return await response.json();\r\n//     } catch (error) {\r\n//         console.error('Error fetching data, sorry try again ;) :', error);\r\n//     }\r\n// };\r\n//     fetchData(url)\r\n     \r\n//     /// function to make search bar and pages with data\r\n//     //Url stored in url to make fetch or fetch outside of try-catch with out variable? decisions\r\n//     function search(page = 1) {\r\n//         const query = document.getElementById('searchQ').value;\r\n//         const url = `https://api.thecatapi.com/v1/breeds/${query}`;\r\n    \r\n//         try {\r\n//             fetch(url)\r\n//                 .then(response => response.json())\r\n//                 .then(data => {\r\n\r\n//                     console.log(data)\r\n//                     // displayResults(data);\r\n//                     // setupPagination(data.length, page);\r\n//                 })\r\n//                 .catch(error => console.error('Error fetching data, sorry try again ;) :', error));\r\n//         } catch (error) {\r\n//             console.error('Error fetching data, sorry try again ;) :', error);\r\n//         }\r\n//     }\r\n\r\n",
            "mode": "js",
            "outputs": []
        }
    ]
}